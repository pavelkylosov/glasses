import { ViewType } from '@mentra/sdk';
import { formatDateTime, formatDate } from '../utils/dateFormatter.js';

/**
 * DashboardModule - –ú–æ–¥—É–ª—å –≥–ª–∞–≤–Ω–æ–≥–æ –¥–∞—à–±–æ—Ä–¥–∞
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –ø–æ–¥–Ω—è—Ç–∏–∏ –≥–æ–ª–æ–≤—ã
 */
export class DashboardModule {
    constructor(weatherModule, birthdaysModule) {
        this.weatherModule = weatherModule;
        this.birthdaysModule = birthdaysModule;
        this.weatherCache = new Map();
        this.cacheTTL = 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç
    }

    init(session, sessionId) {
        console.log(`‚úÖ [Dashboard] –ú–æ–¥—É–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω`);
        
        this.preloadWeather(sessionId);
        
        const interval = setInterval(() => this.preloadWeather(sessionId), this.cacheTTL);
        return [() => clearInterval(interval)];
    }

    /**
     * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–æ–≥–æ–¥—ã –≤ —Ñ–æ–Ω–µ
     */
    async preloadWeather(sessionId) {
        try {
            const weatherData = await this.weatherModule.getWeatherForSession(sessionId);

            this.weatherCache.set(sessionId, { data: weatherData, timestamp: Date.now() });

            console.log(`üå§Ô∏è [Dashboard] –ü–æ–≥–æ–¥–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
        } catch (error) {
            console.error(`‚ùå [Dashboard] –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–≥–æ–¥—ã:`, error);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–æ–≥–æ–¥—É
     */
    getCachedWeather(sessionId) {
        const cached = this.weatherCache.get(sessionId);

        if (!cached) {
            return { weather: '–ó–∞–≥—Ä—É–∑–∫–∞...', locationName: '–ú–æ—Å–∫–≤–∞' };
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤ —Ñ–æ–Ω–µ –µ—Å–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–æ
        if (Date.now() - cached.timestamp > this.cacheTTL) {
            this.preloadWeather(sessionId);
        }

        return cached.data;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è
     */
    getBirthdayInfo() {
        const allBirthdays = this.birthdaysModule.getAllBirthdays();
        const today = new Date();
        const todayStr = `${today.getMonth() + 1}-${today.getDate()}`;

        const todayBirthdays = allBirthdays.filter(birthday => {
            const bDate = new Date(birthday.date);
            return `${bDate.getMonth() + 1}-${bDate.getDate()}` === todayStr;
        });

        if (todayBirthdays.length > 0) {
            const names = todayBirthdays.map(b => b.name).join(', ');
            return `–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É ${names}`;
        }

        if (allBirthdays.length > 0) {
            const nearest = allBirthdays[0];
            return `–ë–ª–∏–∂–∞–π—à–∏–π –î–† —É ${nearest.name}; ${formatDate(nearest.date)}`;
        }

        return '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è';
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥
     */
    showDashboard(session, sessionId) {
        const { time, dayOfWeek, day, month } = formatDateTime();
        const { weather, locationName } = this.getCachedWeather(sessionId);

        const tempMatch = weather.match(/([-\d.]+¬∞C)/);
        const temp = tempMatch ? tempMatch[1] : 'N/A';

        const birthdayInfo = this.getBirthdayInfo();

        const content = `${time}, ${dayOfWeek}, ${day} ${month}
${locationName || '–ú–æ—Å–∫–≤–∞'} ${temp}
–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π –¥–µ–Ω—å –ø–æ –ª—É–Ω–Ω–æ–º—É –∫–∞–ª–µ–Ω–¥–∞—Ä—é
${birthdayInfo}`;

        session.layouts.showTextWall(content, { view: ViewType.DASHBOARD, durationMs: -1 });

        console.log(`‚úÖ [Dashboard] –î–∞—à–±–æ—Ä–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω`);
    }

    /**
     * –°–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥
     */
    hideDashboard(session) {
        session.layouts.showTextWall('', { view: ViewType.DASHBOARD, durationMs: 1 });
        console.log(`üîΩ [Dashboard] –î–∞—à–±–æ—Ä–¥ —Å–∫—Ä—ã—Ç`);
    }

    cleanup(sessionId) {
        this.weatherCache.delete(sessionId);
    }
}
